<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(* ============================================================================&#xD;
   FESTO AG &amp; Co. KG, Esslingen - Copyright 2015. All rights reserved.                       &#xD;
 -----------------------------------------------------&#xD;
 function block:	FML_Read  &#xD;
 description:    		function block to read all input data from controller&#xD;
 version:        		V 1.0        &#xD;
 composer:       	chmm &#xD;
 last update:    		June 2015                                                                           &#xD;
 -----------------------------------------------------&#xD;
Date        			Name              				Activity                                                                              &#xD;
June 2015  		Christian Hammer		created&#xD;
============================================================================ *)&#xD;
&#xD;
// ENO BIT for using this FB in ladder is always true&#xD;
FB_ENO := TRUE;&#xD;
&#xD;
// EN BIT for using this FB in ladder - if false skip the routine&#xD;
IF NOT FB_EN THEN&#xD;
	RETURN;&#xD;
END_IF;&#xD;
&#xD;
(******************************************************************************************************************************&#xD;
*********** INPUT DATA *****************************************************************************************************&#xD;
******************************************************************************************************************************)&#xD;
&#xD;
// functionblock (FB) ist active&#xD;
Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_busy; &#xD;
&#xD;
// set DeviceType of the controller&#xD;
FML_REF.DeviceType			:= DeviceType;&#xD;
&#xD;
// set type of bus and byteorder&#xD;
FML_REF.Modbus				:= Modbus;&#xD;
FML_REF.HighByteFirst		:= HighByteFirst;&#xD;
&#xD;
// mode of the parameter channel (in use or not)&#xD;
FML_REF.FPC_active				:= FPC_active;&#xD;
&#xD;
// reading and mapping of FHPP bus data &#xD;
FB_FHPP_Read(&#xD;
		FML_REF			:= FML_REF,&#xD;
		FHPP_Source	:= FHPP_Source);&#xD;
		&#xD;
// if parameter-channel (FPC) is activated - reading and mapping of FPC bus data	&#xD;
IF FML_REF.FPC_active THEN&#xD;
	FB_FPC_Read(&#xD;
		FML_REF			:= FML_REF,&#xD;
		FPC_Source		:= FPC_Source);&#xD;
END_IF;&#xD;
&#xD;
IF (PlcConfigFHPP_PLUS_IN&lt;&gt;0) THEN&#xD;
	FB_FHPP_PLUS_Read(&#xD;
		FML_REF							:= FML_REF,&#xD;
		PlcConfigFHPP_PLUS_IN	:= PlcConfigFHPP_PLUS_IN,&#xD;
		FHPP_PLUS_Source1		:= FHPP_PLUS_Source1,&#xD;
		FHPP_PLUS_Source2		:= FHPP_PLUS_Source2,&#xD;
		FHPP_PLUS_Source3		:= FHPP_PLUS_Source3,&#xD;
		Status								=&gt; Status);&#xD;
END_IF	;	&#xD;
&#xD;
// if illegal RETVAL --&gt; interrupt FB and set RETVAL  &#xD;
IF (Status.Err = FALSE) THEN																	// 0 = FML_NO_ERROR&#xD;
	Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error; &#xD;
END_IF	;		&#xD;
&#xD;
Status.Msg								:= GetStatusMessage(Status);&#xD;
Error											:= Status.Err;&#xD;
&#xD;
(* ===== end of function block ============================= *)</Text></StructuredTextModel>