<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(* ============================================================================&#xD;
   FESTO AG &amp; Co. KG, Esslingen - Copyright 2015. All rights reserved.                       &#xD;
 -----------------------------------------------------&#xD;
 function block:	FPC_DIRMP &#xD;
 description:    		function block to pass dynamic parameter values for directmode positioncontrol&#xD;
 version:        		V 1.0        &#xD;
 composer:       	chmm &#xD;
 last update:    		June 2015                                                                           &#xD;
 -----------------------------------------------------&#xD;
Date        			Name              				Activity                                                                              &#xD;
June 2015  		Christian Hammer		created&#xD;
============================================================================ *)&#xD;
&#xD;
// ENO BIT for using this FB in ladder is always true&#xD;
FB_ENO := TRUE;&#xD;
&#xD;
// EN BIT for using this FB in ladder - if false skip the routine&#xD;
IF NOT FB_EN THEN&#xD;
	RETURN;&#xD;
END_IF;&#xD;
&#xD;
(* ====== initial block routine ======================================================= *)&#xD;
(* ----- get MemberID for this function block ---------------------------------------------------------------------------------*)&#xD;
&#xD;
IF NOT bInit THEN&#xD;
	FML_REF.MemberIDmax		:= FML_REF.MemberIDmax +1;&#xD;
	lMemberID							:= FML_REF.MemberIDmax;&#xD;
	bInit										:= TRUE;&#xD;
	Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_init_active;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
(* ====== supervision of timeout ==================================== *)&#xD;
(* ----- timer to monitor a timeout of the function block ------------*)&#xD;
TONInst(IN := TimeStart, PT := TimeoutTime);&#xD;
IF TONInst.Q THEN&#xD;
	Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_timeout;&#xD;
	Done									:= TRUE;&#xD;
	StepNo								:= 30;&#xD;
END_IF	;	&#xD;
&#xD;
&#xD;
IF Param[1].PNU = 0 THEN&#xD;
  FOR ixPar:=1 TO 3 DO												// maxParamCount = 3 (max number of parameter)&#xD;
    Param[ixPar].PNU 				:= listPNU[ixPar]; 			// fill in the PNU&#xD;
    Param[ixPar].SUBINDEX 		:= 1;         					// fill in a fix subindex&#xD;
	END_FOR;&#xD;
    // 1 =  540.1: Paramter Direktbetrieb Basisgeschwindigkeit directmode positioning&#xD;
    // 2 =  541.1: Paramter Beschleunigung directmode positioning&#xD;
    // 3 =  542.1: Paramter Verz√∂gerung directmode positioning&#xD;
END_IF;&#xD;
&#xD;
(* ===== logic part ============================================================== *)&#xD;
IF NOT Execute AND (StepNo &lt;&gt; 0) THEN   					// aborting FB&#xD;
	FML_REF.MemberID		:= 0;&#xD;
	FML_REF.ReqID        		:= FML_FPC_REQ_none;&#xD;
	FML_REF.PNU       			:= 0;&#xD;
	FML_REF.Subindex   		:= 0;&#xD;
	FML_REF.Value					:= 0;&#xD;
	ActVelocity						:= 0;&#xD;
	ActAcceleration				:= 0;&#xD;
	ActDeceleration				:= 0;&#xD;
 	StepNo               				:= 0;	&#xD;
END_IF;&#xD;
&#xD;
CASE StepNo OF&#xD;
  0: (* *)&#xD;
	  	Done									:= FALSE;&#xD;
	 	TimeStart							:= FALSE;&#xD;
	 	Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
&#xD;
		IF (FML_REF.MemberID = 0) AND Execute THEN &#xD;
			Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_busy;&#xD;
			&#xD;
			IF (FML_REF.DeviceType = CMMP_AS) &#xD;
			OR (FML_REF.DeviceType = CMMS_AS) &#xD;
			OR (FML_REF.DeviceType = CMMS_ST)&#xD;
			OR (FML_REF.DeviceType = CMMD_AS) THEN				(* CMMP-AS or CMMS_AS or CMMS_ST or CMMD_AS *)	&#xD;
				FML_REF.FPCC_Modus 	:= FML_FPC_MODUS_PNU_11BIT;&#xD;
			ELSE 																				(*******EMCA-EC or CMMO-ST*******)	&#xD;
				FML_REF.FPCC_Modus 	:= FML_FPC_MODUS_PNU_16BIT;&#xD;
			END_IF;&#xD;
			&#xD;
	    	FML_REF.MemberID	:= lMemberID;&#xD;
			FML_REF.ReqID			:= FML_FPC_REQ_none;&#xD;
			FML_REF.PNU				:= 0;&#xD;
			FML_REF.Subindex		:= 0;&#xD;
			FML_REF.Value				:= 0;&#xD;
			ixPar								:= 1;  										// set to 1st array element&#xD;
			(* writing *)&#xD;
			IF Write THEN&#xD;
				Param[1].Value		:= Velocity;&#xD;
				Param[2].Value		:= Acceleration;&#xD;
				Param[3].Value		:= Deceleration;&#xD;
				StepNo					:= 10;&#xD;
			(* reading *)&#xD;
			ELSE&#xD;
				StepNo					:= 20;&#xD;
			END_IF;&#xD;
		ELSIF (FML_REF.MemberID &lt;&gt; lMemberId) AND Execute THEN&#xD;
			Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_other_fb_active;&#xD;
		END_IF;&#xD;
&#xD;
  10:(* writing parameter[ixPar] *)&#xD;
  		TimeStart								:= TRUE;&#xD;
  &#xD;
		IF NOT FML_REF.Done THEN&#xD;
			TimeStart							:= FALSE;&#xD;
		    FML_REF.ReqID				:= FML_FPC_REQ_write_array_dword;&#xD;
		    FML_REF.PNU					:= Param[ixPar].PNU;&#xD;
		    FML_REF.Subindex			:= Param[ixPar].SUBINDEX;&#xD;
		    FML_REF.Value					:= Param[ixPar].VALUE;&#xD;
		    StepNo							:= 11;&#xD;
		END_IF;&#xD;
&#xD;
  11:(* *)&#xD;
  		TimeStart								:= TRUE;&#xD;
		&#xD;
		IF FML_REF.Done AND NOT FML_REF.Err THEN&#xD;
			TimeStart							:= FALSE;&#xD;
			FML_REF.ReqID				:= FML_FPC_REQ_none;&#xD;
		    ixPar									:= ixPar +1;&#xD;
		    StepNo							:= 10;&#xD;
		    IF ixPar &gt; 3 THEN															// maxParamCount = 3 (max number of parameter)&#xD;
				Done							:= TRUE;&#xD;
				ActVelocity					:= Param[1].Value;&#xD;
				ActAcceleration			:= Param[2].Value;&#xD;
				ActDeceleration			:= Param[3].Value;&#xD;
				Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
		       	StepNo						:= 30;&#xD;
		    END_IF;&#xD;
			&#xD;
		ELSIF FML_REF.Done AND FML_REF.Err THEN&#xD;
			TimeStart							:= FALSE;&#xD;
		  	Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_parameter_transfer; Status.ID:=FML_REF.ActValue;&#xD;
		  	Done								:= TRUE;&#xD;
		  	StepNo							:= 30;&#xD;
		END_IF;&#xD;
&#xD;
  20: (* reading *)&#xD;
  		TimeStart								:= TRUE;&#xD;
  &#xD;
		IF NOT FML_REF.Done THEN&#xD;
			TimeStart							:= FALSE;&#xD;
			FML_REF.ReqID				:= FML_FPC_REQ_read_array;&#xD;
	 		FML_REF.PNU					:= Param[ixPar].PNU;&#xD;
	 		FML_REF.Subindex			:= Param[ixPar].SUBINDEX;&#xD;
	 		StepNo							:= 21;&#xD;
		END_IF;&#xD;
&#xD;
  21:(**)&#xD;
  		TimeStart								:= TRUE;&#xD;
  &#xD;
		IF FML_REF.Done AND NOT FML_REF.Err THEN&#xD;
			TimeStart							:= FALSE;&#xD;
		    FML_REF.ReqID				:= FML_FPC_REQ_none;&#xD;
		    Param[ixPar].Value			:= FML_REF.ActValue;&#xD;
		    ixPar									:= ixPar +1;&#xD;
		    StepNo							:= 20;&#xD;
		    IF ixPar &gt; 3 THEN															// maxParamCount = 3 (max number of parameter)&#xD;
				ActVelocity					:= Param[1].VALUE;&#xD;
				ActAcceleration			:= Param[2].VALUE;&#xD;
				ActDeceleration			:= Param[3].VALUE;&#xD;
				Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
				Done							:= TRUE;&#xD;
				StepNo						:= 30;&#xD;
		    END_IF;&#xD;
		ELSIF FML_REF.Done AND FML_REF.Err THEN&#xD;
			TimeStart							:= FALSE;&#xD;
			Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_parameter_transfer; Status.ID:=FML_REF.ActValue;&#xD;
		    Done								:= TRUE;&#xD;
		    StepNo							:= 30;&#xD;
		END_IF;&#xD;
&#xD;
  30: (* done - do nothing*)&#xD;
		 ;&#xD;
&#xD;
END_CASE;&#xD;
&#xD;
Status.Msg									:= GetStatusMessage(Status);&#xD;
Error												:= Status.Err;&#xD;
&#xD;
(* ===== end of function block ====================================================== *)</Text></StructuredTextModel>