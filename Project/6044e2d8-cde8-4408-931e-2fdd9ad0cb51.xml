<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(* ============================================================================&#xD;
   FESTO AG &amp; Co. KG, Esslingen - Copyright 2015. All rights reserved.                       &#xD;
 -----------------------------------------------------&#xD;
 function block:	FPC_DATA_OBJECT  &#xD;
 description:    		function block to pass internal data objects to the controller&#xD;
 version:        		V 1.0        &#xD;
 composer:       	chmm &#xD;
 last update:    		June 2015                                                                           &#xD;
 -----------------------------------------------------&#xD;
Date        			Name              				Activity                                                                              &#xD;
June 2015  		Christian Hammer		created&#xD;
============================================================================ *)&#xD;
&#xD;
// ENO BIT for using this FB in ladder is always true&#xD;
FB_ENO := TRUE;&#xD;
&#xD;
// EN BIT for using this FB in ladder - if false skip the routine&#xD;
IF NOT FB_EN THEN&#xD;
	RETURN;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
(* ====== initial block routine ===================================== *)&#xD;
(* ----- get MemberID for this function block ------------------------*)&#xD;
&#xD;
IF NOT bInit THEN&#xD;
	FML_REF.MemberIDmax		:= FML_REF.MemberIDmax +1;&#xD;
	lMemberID							:= FML_REF.MemberIDmax;&#xD;
	bInit										:= TRUE;&#xD;
	Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_init_active;&#xD;
END_IF;&#xD;
&#xD;
	&#xD;
(* ====== supervision of timeout ==================================== *)&#xD;
(* ----- timer to monitor a timeout of the function block ------------*)&#xD;
TONInst(IN := TimeStart, PT := TimeoutTime);&#xD;
IF TONInst.Q THEN&#xD;
	Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_timeout;&#xD;
	Done									:= TRUE;&#xD;
	StepNo								:= 100;&#xD;
END_IF	;	&#xD;
&#xD;
&#xD;
(* ===== logic part ================================================= *)&#xD;
&#xD;
IF NOT Execute AND (StepNo &lt;&gt; 0) THEN&#xD;
 	FML_REF.MemberID		:= 0;&#xD;
	FML_REF.ReqID				:= FML_FPC_REQ_none;&#xD;
	FML_REF.FPCC_Modus		:= 0;&#xD;
	FML_REF.PNU					:= 0;&#xD;
	FML_REF.Subindex			:= 0;&#xD;
	FML_REF.Value					:= 0;&#xD;
	StepNo							:= 0;&#xD;
END_IF;&#xD;
&#xD;
CASE StepNo OF&#xD;
	0:(* *)&#xD;
		Done							:= FALSE;&#xD;
		TimeStart						:= FALSE;&#xD;
		ActObject						:= 0;&#xD;
		ActSubindex				:= 0;&#xD;
		ActValue						:= 0;&#xD;
		Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
&#xD;
		IF (FML_REF.MemberID = 0) AND Execute THEN&#xD;
    		FML_REF.MemberID		:= lMemberID;&#xD;
			FML_REF.ReqID				:= FML_FPC_REQ_none;	&#xD;
			FML_REF.PNU					:= 0;&#xD;
			FML_REF.Subindex			:= 0;&#xD;
			FML_REF.Value					:= 0;&#xD;
			Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_busy;&#xD;
			&#xD;
			IF (FML_REF.DeviceType = CMMP_AS) &#xD;
			OR (FML_REF.DeviceType = CMMS_AS) &#xD;
			OR (FML_REF.DeviceType = CMMS_ST)&#xD;
			OR (FML_REF.DeviceType = CMMD_AS) THEN									(* CMMP-AS or CMMS_AS or CMMS_ST or CMMD_AS *)&#xD;
				FML_REF.FPCC_Modus		:= FML_FPC_MODUS_PNU_11BIT;			// 0 	// transmit PNU with 11 bit&#xD;
				StepNo							:= 10;				&#xD;
			ELSE 																									(* CMMO-ST AND EMCA-EC *)&#xD;
				FML_REF.FPCC_Modus		:= FML_FPC_MODUS_DATA_OBJECT;		// 2 	// FPC access for internal data objects&#xD;
				StepNo							:= 20;&#xD;
			END_IF;&#xD;
			&#xD;
		ELSIF (FML_REF.MemberID &lt;&gt; lMemberId) AND Execute THEN&#xD;
			Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_other_fb_active;&#xD;
		END_IF;&#xD;
&#xD;
(* CMMP-AS or CMMS_AS or CMMS_ST or CMMD_AS *)		&#xD;
	10:(* open tunnel access *)&#xD;
		FML_REF.ReqID				:= FML_FPC_REQ_write_array_dword; &#xD;
		FML_REF.PNU					:= 80;&#xD;
		FML_REF.Subindex			:= 1;&#xD;
		FML_REF.Value					:= Object;&#xD;
		TimeStart							:= TRUE;&#xD;
		&#xD;
		IF FML_REF.Done AND NOT FML_REF.Err THEN&#xD;
			TimeStart						:= FALSE;&#xD;
      		FML_REF.ReqID         	:= FML_FPC_REQ_none;  &#xD;
      		StepNo               			:= 11;&#xD;
  		(* error occured *)&#xD;
  		ELSIF FML_REF.Done AND FML_REF.Err THEN&#xD;
			TimeStart						:= FALSE;&#xD;
      		StepNo               			:= 30;&#xD;
 		END_IF;&#xD;
&#xD;
&#xD;
	11:(* access granted *)&#xD;
		TimeStart								:= TRUE;&#xD;
		&#xD;
		IF NOT FML_REF.Done THEN&#xD;
			TimeStart							:= FALSE;&#xD;
			(* write internal data objects *)&#xD;
			IF Write THEN&#xD;
				FML_REF.ReqID			:= FML_FPC_REQ_write_array_dword; &#xD;
				FML_REF.PNU				:= 82;&#xD;
				FML_REF.Subindex		:= 1;&#xD;
				FML_REF.Value				:= Value;&#xD;
				StepNo						:= 30;&#xD;
    		(* read internal data objects *)&#xD;
			ELSE&#xD;
				FML_REF.ReqID			:= FML_FPC_REQ_read_array;	  &#xD;
				FML_REF.PNU				:= 81;&#xD;
				FML_REF.Subindex		:= 1;&#xD;
				FML_REF.Value				:= 0;&#xD;
				StepNo						:= 30;&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
		&#xD;
(* CMMO-ST AND EMCA-EC *)&#xD;
	20:		&#xD;
		IF Write THEN&#xD;
			FML_REF.ReqID				:= FML_FPC_REQ_write_array_dword; &#xD;
		ELSE&#xD;
			FML_REF.ReqID				:= FML_FPC_REQ_read_array;&#xD;
		END_IF;	&#xD;
			&#xD;
		FML_REF.PNU						:= Object;&#xD;
		FML_REF.Subindex				:= Subindex;&#xD;
		FML_REF.Value						:= Value;&#xD;
		StepNo								:= 30;&#xD;
&#xD;
	30:(* Done *)&#xD;
		TimeStart								:= TRUE;&#xD;
		&#xD;
		IF FML_REF.Done THEN&#xD;
			TimeStart							:= FALSE;&#xD;
			FML_REF.ReqID				:= FML_FPC_REQ_none;&#xD;
			Done								:= TRUE;&#xD;
			StepNo							:= 100;&#xD;
			&#xD;
			IF FML_REF.Err THEN&#xD;
				Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_parameter_transfer; Status.ID:=FML_REF.ActValue;&#xD;
				ActValue						:= 0;&#xD;
				ActSubindex				:= 0;&#xD;
				ActObject						:= 0;   &#xD;
			&#xD;
			ELSE&#xD;
				Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
				IF ((FML_REF.DeviceType = CMMP_AS) &#xD;
				OR (FML_REF.DeviceType = CMMS_AS) &#xD;
				OR (FML_REF.DeviceType = CMMS_ST))&#xD;
				OR (FML_REF.DeviceType = CMMD_AS) THEN				(* CMMP-AS or CMMS_AS or CMMS_ST or CMMD_AS *)	&#xD;
					ActObject						:= Object;&#xD;
					ActSubindex				:= Subindex;&#xD;
					ActValue						:= FML_REF.ActValue;&#xD;
				ELSE																					(* CMMO-ST AND EMCA-EC *)&#xD;
					ActObject						:= FML_REF.ActPNU;&#xD;
					ActSubindex				:= FML_REF.ActSubindex;&#xD;
					ActValue						:= FML_REF.ActValue;&#xD;
				END_IF;&#xD;
			END_IF;&#xD;
  		END_IF;&#xD;
	&#xD;
	100: (* done - do nothing*)&#xD;
		;&#xD;
END_CASE;&#xD;
&#xD;
Status.Msg									:= GetStatusMessage(Status);&#xD;
Error												:= Status.Err;&#xD;
&#xD;
(* ===== end of function block ============================= *)</Text></StructuredTextModel>