<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(* ============================================================================&#xD;
   FESTO AG &amp; Co. KG, Esslingen - Copyright 2015. All rights reserved.                       &#xD;
 -----------------------------------------------------&#xD;
 function block:	FPC_DIAG  &#xD;
 description:    		function block to read the most actual error&#xD;
 version:        		V 1.0        &#xD;
 composer:       	chmm &#xD;
 last update:    		June 2015                                                                           &#xD;
 -----------------------------------------------------&#xD;
Date        			Name              				Activity                                                                              &#xD;
June 2015  		Christian Hammer		created&#xD;
============================================================================ *)&#xD;
&#xD;
// ENO BIT for using this FB in ladder is always true&#xD;
FB_ENO := TRUE;&#xD;
&#xD;
// EN BIT for using this FB in ladder - if false skip the routine&#xD;
IF NOT FB_EN THEN&#xD;
	RETURN;&#xD;
END_IF;&#xD;
&#xD;
(* ====== initial block routine ======================================================= *)&#xD;
(* ----- get MemberID for this function block ---------------------------------------------------------------------------------*)&#xD;
IF NOT bInit THEN&#xD;
	FML_REF.MemberIDmax		:= FML_REF.MemberIDmax +1;&#xD;
	lMemberID            				:= FML_REF.MemberIDmax;&#xD;
	bInit              						:= TRUE;&#xD;
	Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_init_active;&#xD;
END_IF;&#xD;
&#xD;
	&#xD;
(* ====== supervision of timeout ==================================== *)&#xD;
(* ----- timer to monitor a timeout of the function block ------------*)&#xD;
TONInst(IN := TimeStart, PT := TimeoutTime);&#xD;
IF TONInst.Q THEN&#xD;
	Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_timeout;&#xD;
	Done									:= TRUE;&#xD;
END_IF	;	&#xD;
&#xD;
&#xD;
(* ===== logic part ============================================================== *)&#xD;
(* ----- ASSIGNMENT OF STATUS -------------------------------------------------------------------------------------------- *)&#xD;
IF FML_REF.MemberID = lMemberId THEN&#xD;
	IF FML_REF.Done AND NOT FML_REF.Err AND NOT Status.Err THEN&#xD;
		TimeStart						:= FALSE;&#xD;
		Done							:= TRUE;&#xD;
		&#xD;
    	IF FML_REF.ActValue = 65535 THEN 					// special: -1 to 0&#xD;
			MessageNumber 	:= 0; &#xD;
		ELSE&#xD;
			MessageNumber		:= DINT_TO_INT(FML_REF.ActValue);	&#xD;
		END_IF;  &#xD;
		&#xD;
		MessageDescription	:= FaultString(MessageNumber, FML_REF.DeviceType);&#xD;
		Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
		&#xD;
	ELSIF FML_REF.Err THEN&#xD;
		Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_parameter_transfer; Status.ID:=FML_REF.ActValue;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
(* ----- ASSIGNMENT OF CONTROL at rising edge of Execute ----------------------------------------------------------- *)&#xD;
IF (FML_REF.MemberID = 0) AND Execute THEN&#xD;
	TimeStart							:= TRUE;&#xD;
	Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_busy;&#xD;
	FML_REF.MemberID    	:= lMemberID;&#xD;
	FML_REF.ReqID				:= FML_FPC_REQ_read_array;&#xD;
	&#xD;
	IF (FML_REF.DeviceType = CMMP_AS) &#xD;
	OR (FML_REF.DeviceType = CMMS_AS) &#xD;
	OR (FML_REF.DeviceType = CMMS_ST)&#xD;
	OR (FML_REF.DeviceType = CMMD_AS) THEN				(* CMMP-AS or CMMS_AS or CMMS_ST or CMMD_AS *)&#xD;
		FML_REF.FPCC_Modus 	:= FML_FPC_MODUS_PNU_11BIT;&#xD;
		FML_REF.PNU					:= 201;&#xD;
  		FML_REF.Subindex			:= 1;&#xD;
	ELSE 																				(*******EMCA-EC or CMMO-ST*******)	&#xD;
		FML_REF.FPCC_Modus 	:= FML_FPC_MODUS_PNU_16BIT;&#xD;
		FML_REF.PNU					:= 205;&#xD;
  		FML_REF.Subindex			:= 1;&#xD;
	END_IF;&#xD;
	FML_REF.Value						:= 0;&#xD;
&#xD;
ELSIF (FML_REF.MemberID = lMemberId) AND NOT Execute THEN&#xD;
	FML_REF.ReqID					:= FML_FPC_REQ_none;&#xD;
	FML_REF.PNU						:= 0;&#xD;
	FML_REF.Subindex				:= 0;&#xD;
	FML_REF.Value						:= 0;&#xD;
	MessageNumber					:= 0;&#xD;
	MessageDescription			:= '';&#xD;
	TimeStart								:= TRUE;&#xD;
	&#xD;
	IF NOT FML_REF.Done THEN&#xD;
		FML_REF.MemberID		:= 0;     								// free the modul after all transmission&#xD;
		TimeStart							:= FALSE;&#xD;
		Done								:= FALSE;&#xD;
		Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
	END_IF;&#xD;
	&#xD;
ELSIF (FML_REF.MemberID &lt;&gt; lMemberId) THEN&#xD;
	IF Execute THEN&#xD;
		Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_other_fb_active;		// 10 = wait for access&#xD;
	ELSE&#xD;
		Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;      				// 0 = abort of transfer&#xD;
	END_IF; &#xD;
END_IF;&#xD;
&#xD;
Status.Msg								:= GetStatusMessage(Status);&#xD;
Error											:= Status.Err;&#xD;
&#xD;
(* ===== end of function block ====================================================== *)</Text></StructuredTextModel>