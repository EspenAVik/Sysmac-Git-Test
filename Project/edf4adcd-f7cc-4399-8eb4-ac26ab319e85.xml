<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(* ============================================================================&#xD;
   FESTO AG &amp; Co. KG, Esslingen - Copyright 2015. All rights reserved.                       &#xD;
 -----------------------------------------------------&#xD;
 function block:	FPC_MULTI  &#xD;
 description:    		function block to pass an array of FHPP parameter to or from the motorcontroller&#xD;
 version:        		V 1.0        &#xD;
 composer:       	chmm &#xD;
 last update:    		June 2015                                                                           &#xD;
 -----------------------------------------------------&#xD;
Date        			Name              				Activity                                                                              &#xD;
June 2015  		Christian Hammer		created&#xD;
============================================================================ *)&#xD;
&#xD;
// ENO BIT for using this FB in ladder is always true&#xD;
FB_ENO := TRUE;&#xD;
&#xD;
// EN BIT for using this FB in ladder - if false skip the routine&#xD;
IF NOT FB_EN THEN&#xD;
	RETURN;&#xD;
END_IF;&#xD;
&#xD;
(* ====== initial block routine ======================================================= *)&#xD;
(* ----- get MemberID for this function block ---------------------------------------------------------------------------------*)&#xD;
IF NOT bInit THEN&#xD;
	FML_REF.MemberIDmax		:= FML_REF.MemberIDmax +1;&#xD;
	lMemberID            				:= FML_REF.MemberIDmax;&#xD;
	bInit              						:= TRUE;&#xD;
	Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_init_active;&#xD;
END_IF;&#xD;
	&#xD;
	&#xD;
(* ====== supervision of timeout ==================================== *)&#xD;
(* ----- timer to monitor a timeout of the function block ------------*)&#xD;
TONInst(IN := TimeStart, PT := TimeoutTime);&#xD;
IF TONInst.Q THEN&#xD;
	Done									:= TRUE;&#xD;
	Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_timeout;&#xD;
	StepNo								:= 30;&#xD;
END_IF	;&#xD;
&#xD;
&#xD;
(* ===== logic part ============================================================= *)&#xD;
&#xD;
IF NOT Execute AND (StepNo &lt;&gt; 0) THEN&#xD;
	FML_REF.MemberID			:= 0;&#xD;
	FML_REF.ReqID					:= FML_FPC_REQ_none;&#xD;
	FML_REF.PNU						:= 0;&#xD;
	FML_REF.Subindex				:= 0;&#xD;
	FML_REF.Value						:= 0;&#xD;
	StepNo								:= 0;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
CASE StepNo OF&#xD;
	&#xD;
	0: (* initial prepare*)&#xD;
		Done								:= FALSE;&#xD;
  		ActualParamNo				:= 0;&#xD;
		TimeStart							:= FALSE;&#xD;
  		Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
		&#xD;
		// rising edge of execute &#xD;
		IF (FML_REF.MemberID = 0) AND Execute THEN&#xD;
			FML_REF.MemberID	:= lMemberID;&#xD;
			Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_busy;&#xD;
			StepNo 	                	:= 1;&#xD;
			&#xD;
		// other FB active &#xD;
		ELSIF Execute AND FML_REF.MemberID &lt;&gt; lMemberId THEN&#xD;
			Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_other_fb_active;&#xD;
		END_IF;		&#xD;
  &#xD;
  &#xD;
	1: (* set set access method *)&#xD;
		TimeStart							:= TRUE;&#xD;
		IF NOT FML_REF.Done THEN&#xD;
			TimeStart						:= FALSE;&#xD;
		 	FML_REF.PNU				:= ParamData[ActualParamNo].PNU;&#xD;
    	 	FML_REF.Subindex		:= ParamData[ActualParamNo].SUBINDEX;&#xD;
		  &#xD;
		  &#xD;
		  CASE ParamData[ActualParamNo].AccessNo OF&#xD;
			&#xD;
		   0:	(* read objekt *)&#xD;
				FML_REF.ReqID		:= FML_FPC_REQ_read_array;&#xD;
				StepNo					:= 20; 																			// read parameter&#xD;
						&#xD;
			1: (* write object *)&#xD;
				FML_REF.ReqID		:= FML_FPC_REQ_write_array_dword;&#xD;
				FML_REF.Value			:= ParamData[ActualParamNo].VALUE;&#xD;
				StepNo					:= 10; 																			// write parameter&#xD;
					&#xD;
			ELSE  (* wrong access methode selected *)&#xD;
				Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_function_block; Status.ID:=FML_STATUS_ID_FB_wrong_access_value;&#xD;
				Done						:= TRUE;&#xD;
	 			StepNo					:= 30;&#xD;
			END_CASE;&#xD;
			&#xD;
			// set FPCC mode&#xD;
			IF (FML_REF.DeviceType = CMMP_AS) &#xD;
				OR (FML_REF.DeviceType = CMMS_AS) &#xD;
				OR (FML_REF.DeviceType = CMMS_ST)&#xD;
				OR (FML_REF.DeviceType = CMMD_AS) THEN				(* CMMP-AS or CMMS_AS or CMMS_ST or CMMD_AS *)	&#xD;
					FML_REF.FPCC_Modus		:= FML_FPC_MODUS_PNU_11BIT;&#xD;
			ELSE 																					(* CMMO-ST AND EMCA-EC *)&#xD;
					FML_REF.FPCC_Modus 	:= FML_FPC_MODUS_PNU_16BIT;&#xD;
			END_IF;		&#xD;
			&#xD;
  		END_IF;  	&#xD;
		&#xD;
			&#xD;
	10: (* writing done *)&#xD;
	 	TimeStart							:= TRUE;&#xD;
		&#xD;
	  	IF FML_REF.Done AND NOT FML_REF.Err THEN&#xD;
			TimeStart						:= FALSE;&#xD;
			// next parameter&#xD;
			FML_REF.ReqID			:= FML_FPC_REQ_none;&#xD;
			ActualParamNo			:= ActualParamNo + 1;&#xD;
			StepNo						:= 1;&#xD;
			&#xD;
			// this parameter was the last parameter or next parameter is empty&#xD;
			IF (ActualParamNo &gt;= NumberOfParams) OR (ParamData[ActualParamNo].PNU=0)  THEN&#xD;
				Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
		 		Done						:= TRUE;&#xD;
		  		StepNo					:= 30;&#xD;
			END_IF;&#xD;
			&#xD;
		// error	&#xD;
	  	ELSIF FML_REF.Done AND FML_REF.Err THEN&#xD;
			TimeStart						:= FALSE;&#xD;
			Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_parameter_transfer; Status.ID:=FML_REF.ActValue;&#xD;
		 	Done							:= TRUE;&#xD;
		  	StepNo						:= 30;&#xD;
	  	END_IF;	&#xD;
&#xD;
&#xD;
	20: (* reading done *)&#xD;
		TimeStart							:= TRUE;&#xD;
	&#xD;
  		IF FML_REF.Done AND NOT FML_REF.Err THEN&#xD;
			TimeStart													:= FALSE;&#xD;
			// next parameter&#xD;
			FML_REF.ReqID										:= FML_FPC_REQ_none;&#xD;
    		ParamData[ActualParamNo].Value			:= FML_REF.ActValue;&#xD;
			ActualParamNo										:= ActualParamNo + 1;&#xD;
    		StepNo													:= 1;&#xD;
			&#xD;
			// this parameter was the last parameter or next parameter is empty&#xD;
   			IF (ActualParamNo &gt;= NumberOfParams) OR (ParamData[ActualParamNo].PNU=0)  THEN&#xD;
				Status.Err:=FALSE; Status.Cat:=FML_STATUS_CATEGORY_no_category; Status.ID:=FML_STATUS_ID_FB_no_error;&#xD;
		 		Done						:= TRUE;&#xD;
		  		StepNo					:= 30;&#xD;
    		END_IF;&#xD;
		&#xD;
		// error&#xD;
		ELSIF FML_REF.Done AND FML_REF.Err THEN&#xD;
				TimeStart					:= FALSE;&#xD;
				Status.Err:=TRUE; Status.Cat:=FML_STATUS_CATEGORY_parameter_transfer; Status.ID:=FML_REF.ActValue;&#xD;
		 		Done						:= TRUE;&#xD;
		  		StepNo					:= 30;&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
	30: (* execution done - do nothing *)&#xD;
			;&#xD;
		&#xD;
END_CASE;&#xD;
&#xD;
Status.Msg								:= GetStatusMessage(Status);&#xD;
Error											:= Status.Err;&#xD;
&#xD;
(* ===== end of function block ====================================================== *)</Text></StructuredTextModel>